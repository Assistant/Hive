openapi: 3.0.0
info:
  title: Hive
  description: Hive API Specification
  contact:
    name: BSMG
  version: '1.0'
servers:
  - url: 'https://localhost:5001'
paths:
  /auth_server:
    get:
      summary: Get the URI location to the Auth Server linked to this Hive Instance
      tags: []
      operationId: get-auth_server
      description: |-
        Returns the URI of the authentication server used for authentication requests.

        Plugin permission check at: hive.auth_server
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
  /mods:
    parameters:
      - name: page
        description: |
          The page of mods to request. Defaults to 0.
        in: query
        required: false
        schema:
          type: number
      - name: language
        description: |
          The ISO identifier of the lanugage to get mod info in.
        in: query
        required: false
        schema:
          type: string
    get:
      summary: 'Gets all of the mods in the specified channel(s), or a default if none is specified'
      parameters:
        - name: channelIds
          description: The IDs of the channels to look up mods in
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
            uniqueItems: true
        - schema:
            type: string
          in: query
          name: gameVersion
          description: Game version to filter by
        - schema:
            type: string
            enum:
              - all
              - latest
            default: latest
          in: query
          name: filterType
          description: How to filter the returned mods
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Mod'
              examples:
                Default Response:
                  value:
                    - id: test-mod
                      version: 0.1.0
                      uploadedAt: '2021-01-19T23:42:11.415979Z'
                      editedAt: null
                      uploaderUsername: me
                      channelName: default
                      downloadLink: 'file:///'
                      localizedModInfo:
                        language: en-US
                        name: Test Mod
                        description: A mod in the DB for testing
                        changelog: null
                        credits: null
                      authors: []
                      contributors: []
                      supportedGameVersions:
                        - 1.0.0
                      links: []
                      dependencies:
                        - modID: dep-id
                          versions: ^1.0.0
                      conflictsWith: []
                      additionalData: {}
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      operationId: get-mods
      description: |-
        Gets all mods for a given channelId and channelIds to look within.
        Query parameters left empty will use defaults.
        channelId defaults to the instance default channel, typically a public channel.
        channelIds defaults to an empty array.
        gameVersion defaults to latest.
        filterType defaults to latest.

        Options for filterType are:
        all: Returns all versions for each mod listed in the channel(s).
        latest: Returns only the latest versions for each mod listed in the channel(s).

        Plugin permission check at: hive.mod
  '/mod/{modId}':
    parameters:
      - schema:
          type: string
        name: modId
        in: path
        required: true
    get:
      summary: Gets a mod from the ID specified
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mod'
              examples: {}
            application/xml:
              schema:
                type: object
                properties: {}
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          description: Not Found
      operationId: get-mod-modId
      parameters:
        - schema:
            type: string
          in: query
          name: range
          description: The version range of the mod to obtain
        - schema:
            type: array
          in: header
          name: Accept-Language
          description: The languages to return the localized mod for
      description: |-
        Gets a mod from a given mod ID and version range. If range is not specified, assumes range=*.
        If a list of languages are provided via Accept-Language, will try to return the best LocalizedModInfo that matches.
        If no languages are provided, or a previous match was not found, defaults to the system culture.
        If the system culture does not exist, uses the first LocalizedModInfo of the matching mod.

        Plugin permission check at: hive.mod
      security:
        - vaulthAuth: []
  /mod/upload:
    parameters: []
    post:
      summary: Upload a mod
      operationId: post-mod-upload-modId
      security:
        - vaulthAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  type:
                    type: string
                    enum:
                      - Confirm
                    default: Confirm
                  data:
                    $ref: '#/components/schemas/Mod'
                  actionCookie:
                    type: string
                required:
                  - type
                  - data
                  - actionCookie
        '400':
          description: 'Bad Request. Returned if the file is too big or if there is no file uploaded, or if a plugin denied the upload.'
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  type:
                    type: string
                    enum:
                      - Error
                    default: Error
                  error:
                    type:
                      - object
                      - string
                required:
                  - type
                  - error
        '401':
          $ref: '#/components/responses/ForbiddenResponse'
        '403':
          $ref: '#/components/responses/UnauthorizedResponse'
      description: |-
        Performs the first step of an upload. This performs the following steps:

        1. Performs standard permission checks on the file being uploaded.
        2. Ensures the uploaded file is not too big.
        3. Performs additional plugin validity checks.
        4. Uploads the uploaded file to the CDN.
        5. Returns the data necessary for the next step of uploading. See: /mod/upload/finish

        Plugin permission check at: hive.mod.upload and at: hive.mod.upload.with_data
      parameters: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
        description: The mod file to upload. Valid files are dictated by plugins.
  /game/versions:
    get:
      summary: Returns all game versions
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GameVersion'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      operationId: get-game-versions
      description: |-
        Returns a list of all game versions stored in the instance.

        Plugin permission check at: hive.game.version
      security:
        - vaulthAuth: []
  /resolve_dependencies:
    post:
      summary: Resolve dependencies
      operationId: post-resolve_dependencies
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  message:
                    type: string
                  additionalMods:
                    $ref: '#/components/schemas/Mod'
                required:
                  - message
                  - additionalMods
        '400':
          description: 'Bad Request, invalid data was provided.'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          description: Not Found
        '424':
          description: Failed Dependency (WebDAV)
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  message:
                    type: string
                  additionalMods:
                    $ref: '#/components/schemas/Mod'
                  missing:
                    type: array
                    minItems: 0
                    items:
                      $ref: '#/components/schemas/ModIdentifier'
                  conflicts:
                    type: array
                    minItems: 0
                    items:
                      type: string
                  versionMismatching:
                    type: array
                    minItems: 0
                    items:
                      $ref: '#/components/schemas/ModIdentifier'
                required:
                  - message
                  - missing
                  - conflicts
                  - versionMismatching
                  - additionalMods
      description: |-
        Returns a list of mods that should be installed to resolve all dependencies.
        If the dependencies cannot be resolved, returns a non-200 status code and an empty array.

        Plugin permission check at: hive.resolve_dependencies
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: array
              minItems: 1
              items:
                $ref: '#/components/schemas/ModIdentifier'
        description: Mods to resolve
  '/mod/move/{channelId}':
    parameters:
      - schema:
          type: string
        name: channelId
        in: path
        required: true
    post:
      summary: Move a mod
      operationId: post-mod-move-channelId
      security:
        - vaulthAuth: []
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          description: Not Found. There was no mod found with the given ID and version.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModIdentifier'
            examples: {}
          application/xml:
            schema:
              type: object
              properties: {}
        description: The specific mod identifier to move. A mod ID and specific version.
      description: |-
        Moves a specific ModIdentifier to the provided channelId.

        Plugins permission check at: hive.mod.move
  /channels:
    get:
      summary: 'Gets all publicly viewable channels, or all channels viewable by the given user'
      tags: []
      security:
        - vaulthAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Channel'
                uniqueItems: true
            application/xml:
              schema:
                type: object
                properties: {}
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      operationId: get-channels
      description: |-
        Gets all channels that are publicly viewable.
        When passed with an auth header, then it will return all channels viewable to the authorized user.

        Plugin permission check at: hive.channels
  /instance:
    get:
      summary: Get basic information about this Hive instance
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                minProperties: 0
              examples: {}
      operationId: get-instance
      description: |-
        Get basic information about this Hive instance.
        Information can be exposed and hidden on a per-instance basis.

        Plugin permission check at: hive.instance
  '/mod/{modId}/latest':
    parameters:
      - schema:
          type: string
        name: modId
        in: path
        required: true
    get:
      summary: Get a mod's latest version
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mod'
              examples: {}
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          description: Not Found
      operationId: get-mod-modId-latest
      description: 'Returns the latest mod with the provided ID. This is equivalent to calling: /mod/{modId}?range=*'
      parameters: []
      security:
        - vaulthAuth: []
  /mod/upload/finish:
    post:
      summary: ''
      operationId: post-mod-upload-finish
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  type:
                    type: string
                    enum:
                      - Success
                required:
                  - type
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '410':
          description: 'Gone, you performed the second stage of the upload too long after the first stage.'
      description: |-
        The final stage of an upload. Completes an upload by providing the final metadata of the mod.

        Plugin permission check at: hive.mod.upload.with_data
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              additionalProperties: false
              properties:
                finalMetadata:
                  $ref: '#/components/schemas/Mod'
                cookie:
                  type: string
              required:
                - finalMetadata
                - cookie
        description: The final mod metadata to upload and the cookie returned in response to a successful completion of the first upload step.
      security:
        - vaulthAuth: []
components:
  schemas:
    Channel:
      type: object
      title: Channel
      additionalProperties: false
      description: 'A channel object. Note that additionalData is public, and should not store private information.'
      x-examples:
        Default Channel:
          name: default
          additionalData: {}
      properties:
        name:
          type: string
          minLength: 1
        additionalData:
          type: object
      required:
        - name
        - additionalData
    Mod:
      type: object
      title: Mod
      description: |-
        A mod structure.
        Note that additionalData is publicly read-only and should not store any sensitive information.
      additionalProperties: false
      x-examples:
        Test Mod:
          id: test-mod
          version: 0.1.0
          uploadedAt: '2021-01-19T23:42:11.415979Z'
          editedAt: null
          uploaderUsername: me
          channelName: default
          downloadLink: 'file:///'
          localizedModInfo:
            language: en-US
            name: Test Mod
            description: A mod in the DB for testing
            changelog: null
            credits: null
          authors: []
          contributors: []
          supportedGameVersions:
            - 1.0.0
          links: []
          dependencies:
            - modID: dep-id
              versions: ^1.0.0
          conflictsWith: []
          additionalData: {}
      properties:
        id:
          type: string
        version:
          type: string
        uploadedAt:
          type: string
          format: date-time
        editedAt:
          type: string
          nullable: true
          format: date-time
        uploaderUsername:
          type: string
        channelName:
          type: string
        downloadLink:
          type: string
          format: uri
        localizedModInfo:
          $ref: '#/components/schemas/LocalizedModInfo'
        authors:
          type: array
          items:
            type: string
        contributors:
          type: array
          items:
            type: string
        supportedGameVersions:
          type: array
          items:
            type: string
        links:
          type: array
          items:
            type: object
            additionalProperties: false
            properties:
              name:
                type: string
              url:
                type: string
                format: uri
            required:
              - name
              - url
        dependencies:
          type: array
          items:
            $ref: '#/components/schemas/ModIdentifierRange'
        conflictsWith:
          type: array
          items:
            $ref: '#/components/schemas/ModIdentifierRange'
        additionalData:
          type: object
      required:
        - id
        - version
        - uploadedAt
        - editedAt
        - uploaderUsername
        - channelName
        - downloadLink
        - localizedModInfo
        - authors
        - contributors
        - supportedGameVersions
        - links
        - dependencies
        - conflictsWith
        - additionalData
    LocalizedModInfo:
      type: object
      title: LocalizedModInfo
      description: Localized data of a mod.
      additionalProperties: false
      x-examples:
        Test Mod:
          language: en-US
          name: Test Mod
          description: A mod in the DB for testing
          changelog: null
          credits: null
      properties:
        language:
          type: string
        name:
          type: string
        description:
          type: string
        changelog:
          type:
            - string
            - 'null'
        credits:
          type:
            - string
            - 'null'
      required:
        - language
        - name
        - description
        - changelog
        - credits
    GameVersion:
      type: object
      title: GameVersion
      additionalProperties: false
      description: |-
        Represents a version of a game.
        Additional data is publicly read only. Avoid placing sensitive information in additionalData.
      x-examples:
        Version v1.13.0:
          name: v1.13.0
          additionalData: {}
          creationTime: '2019-08-24T14:15:22Z'
      properties:
        name:
          type: string
          description: The game version itself
        creationTime:
          type: string
          format: date-time
          description: The time this game version was created.
        additionalData:
          type: object
          description: Additional data for this game version
      required:
        - name
        - creationTime
        - additionalData
    ModIdentifierRange:
      type: object
      title: ModIdentifierRange
      description: A mod ID paired with a version range.
      additionalProperties: false
      properties:
        modID:
          type: string
        versions:
          type: string
      required:
        - modID
        - versions
      x-examples:
        Simple Test:
          modID: test-id
          versions: ^1.0.0
    ModIdentifier:
      type: object
      title: ModIdentifier
      additionalProperties: false
      properties:
        id:
          type: string
        version:
          type: string
      required:
        - id
        - version
      description: A mod ID paired with a specific version.
      x-examples:
        Identifier:
          id: test-id
          version: 1.0.0
  securitySchemes:
    vaulthAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: 'Authentication using the OAuth wrapper service, Vaulth.'
  responses:
    ForbiddenResponse:
      description: The response provided when an action is forbidden.
      content:
        application/json:
          schema:
            type: string
            enum:
              - forbidden
          examples:
            Forbidden Response:
              value: forbidden
    UnauthorizedResponse:
      description: Not authorized.
      content:
        application/json:
          schema:
            type: object
